{"version":3,"sources":["contexts/ActiveTask.tsx","components/Header.tsx","components/tasks/Form.tsx","hooks/useForm.ts","components/tasks/New.tsx","components/tasks/Item.tsx","components/tasks/List.tsx","components/App.tsx","hooks/useTasks.ts","index.tsx"],"names":["Context","createContext","setActiveTask","task","console","warn","useActiveTask","useContext","ActiveTaskStore","children","useState","activeTask","Provider","value","Header","className","TaskForm","initialState","handleAction","formState","setFormState","handleChange","event","target","name","handleSubmit","preventDefault","useForm","onSubmit","type","onChange","placeholder","TaskNew","undefined","id","onClick","TaskItem","handleUpdateTask","handleRemoveTask","TaskList","data","error","message","map","App","callback","api","axios","create","baseURL","process","useSWR","url","get","then","res","onSuccess","key","mutate","createTask","a","post","result","updateTask","patch","updatedTask","removeTask","delete","filter","item","useTasks","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e77b4e4c.chunk.js","sourcesContent":["import { createContext, useContext, useState } from 'react';\nimport { Task } from '../types/task';\n\ntype ContextType = {\n  activeTask?: Task;\n  setActiveTask: (task?: Task) => void;\n};\n\nconst Context = createContext<ContextType>({\n  setActiveTask: (task) => console.warn('no task provider'),\n});\n\nexport const useActiveTask = () => useContext(Context);\n\nexport const ActiveTaskStore: React.FC = ({ children }) => {\n  const [activeTask, setActiveTask] = useState<Task>();\n  return (\n    <Context.Provider value={{ activeTask, setActiveTask }}>\n      {children}\n    </Context.Provider>\n  );\n};\n","import React from 'react';\n\nexport const Header: React.FC = () => {\n  return (\n    <header>\n      <h1>\n        <div className=\"title\">React Simple CRUD</div>\n        <div className=\"subtitle\">With SWR And TypeScript</div>\n      </h1>\n    </header>\n  );\n};\n","import React from 'react';\nimport { Task } from '../../types/task';\nimport { useForm } from '../../hooks/useForm';\n\ninterface IProps {\n  activeTask: Task;\n  handleAction: Function;\n}\n\nexport const TaskForm: React.FC<IProps> = ({ activeTask, handleAction }) => {\n  const { formState, handleChange, handleSubmit } = useForm<Task>(\n    activeTask,\n    handleAction\n  );\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={formState.name}\n        onChange={handleChange}\n        placeholder=\"Task description\"\n      />\n      <input type=\"submit\" />\n    </form>\n  );\n};\n","import { useState } from 'react';\n\nexport const useForm = <T>(initialState: T, handleAction: Function) => {\n  const [formState, setFormState] = useState<T>(initialState);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFormState({ ...formState, [event.target.name]: event.target.value });\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    handleAction(formState);\n  };\n\n  return { formState, handleChange, handleSubmit };\n};\n","import React from 'react';\nimport { TaskForm } from './Form';\nimport { useActiveTask } from '../../contexts/ActiveTask';\n\ninterface IProps {\n  handleAction: Function;\n}\n\nexport const TaskNew: React.FC<IProps> = ({ handleAction }) => {\n  const { activeTask, setActiveTask } = useActiveTask();\n\n  return (\n    <div className=\"new\">\n      {activeTask && activeTask.id === undefined ? (\n        <TaskForm handleAction={handleAction} activeTask={activeTask} />\n      ) : (\n        <button className=\"bt-new\" onClick={() => setActiveTask({ name: '' })}>\n          New Task\n        </button>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { TaskForm } from './Form';\nimport { Task } from '../../types/task';\nimport { useActiveTask } from '../../contexts/ActiveTask';\n\ninterface IProps {\n  task: Task;\n  handleUpdateTask: Function;\n  handleRemoveTask: Function;\n}\n\nexport const TaskItem: React.FC<IProps> = ({\n  task,\n  handleUpdateTask,\n  handleRemoveTask,\n}) => {\n  const { activeTask, setActiveTask } = useActiveTask();\n\n  return (\n    <>\n      {activeTask && activeTask.id === task.id ? (\n        <TaskForm handleAction={handleUpdateTask} activeTask={activeTask} />\n      ) : (\n        <div className=\"item\">\n          <span onClick={() => setActiveTask(task)}>{task.name}</span>\n          <button className=\"bt-remove\" onClick={() => handleRemoveTask(task)}>\n            X\n          </button>\n        </div>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { TaskItem } from './Item';\nimport { Task } from '../../types/task';\n\ninterface IProps {\n  data?: Task[];\n  error?: Error;\n  handleUpdateTask: Function;\n  handleRemoveTask: Function;\n}\n\nexport const TaskList: React.FC<IProps> = ({\n  data,\n  error,\n  handleUpdateTask,\n  handleRemoveTask,\n}) => {\n  if (error) return <div className=\"error\">{error.message}</div>;\n  if (!data) return <div className=\"loading\">Loading...</div>;\n\n  return (\n    <div className=\"list\">\n      <ul>\n        {data?.map((task) => (\n          <li key={task.id}>\n            <TaskItem\n              task={task}\n              handleUpdateTask={handleUpdateTask}\n              handleRemoveTask={handleRemoveTask}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Header } from './Header';\nimport { TaskNew } from './tasks/New';\nimport { TaskList } from './tasks/List';\nimport { useActiveTask } from '../contexts/ActiveTask';\nimport { useTasks } from '../hooks/useTasks';\nimport { Task } from '../types/task';\n\nexport const App: React.FC = () => {\n  const { setActiveTask } = useActiveTask();\n  const { data, error, createTask, updateTask, removeTask } =\n    useTasks(setActiveTask);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"content\">\n        <TaskNew handleAction={createTask} />\n        <TaskList\n          data={data}\n          error={error}\n          handleUpdateTask={updateTask}\n          handleRemoveTask={removeTask}\n        />\n      </div>\n    </div>\n  );\n};\n","import axios from 'axios';\nimport useSWR from 'swr';\nimport { Task } from '../types/task';\n\nexport const useTasks = (callback?: Function) => {\n  const api = axios.create({\n    baseURL: process.env.REACT_APP_API_URL,\n  });\n\n  const fetcher = (url: string) => api.get(url).then((res) => res.data);\n\n  const { data, error, mutate } = useSWR<Task[], Error>('/tasks', fetcher, {\n    onSuccess: (data, key) => {\n      if (callback) callback();\n    },\n  });\n\n  const createTask = async (task: Task) => {\n    if (!data) {\n      return false;\n    }\n    const result = await api.post<Task>('/tasks', task);\n    mutate([...data, result.data]);\n  };\n\n  const updateTask = async (task: Task) => {\n    if (!data) {\n      return false;\n    }\n    const { data: updatedTask } = await api.patch<Task>(\n      `/tasks/${task.id}`,\n      task\n    );\n    mutate(\n      data.map(\n        (task) => (task.id === updatedTask.id ? updatedTask : task),\n        false\n      )\n    );\n  };\n\n  const removeTask = async (task: Task) => {\n    if (!data) {\n      return false;\n    }\n    await api.delete<Task>(`/tasks/${task.id}`);\n    mutate(data.filter((item) => item.id === task.id, false));\n  };\n\n  return { data, error, createTask, updateTask, removeTask };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport { ActiveTaskStore } from './contexts/ActiveTask';\nimport { App } from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ActiveTaskStore>\n      <App />\n    </ActiveTaskStore>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}